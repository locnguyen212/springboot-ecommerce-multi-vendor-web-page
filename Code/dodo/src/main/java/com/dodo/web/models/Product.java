package com.dodo.web.models;
// Generated Oct 9, 2023, 11:00:28 PM by Hibernate Tools 4.3.6.Final

import static jakarta.persistence.GenerationType.IDENTITY;

import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import org.springframework.format.annotation.DateTimeFormat;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.OneToMany;
import jakarta.persistence.Table;
import jakarta.persistence.Temporal;
import jakarta.persistence.TemporalType;
import jakarta.validation.constraints.Min;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;

/**
 * Product generated by hbm2java
 */
@Entity
@Table(name = "product", catalog = "dodo")
public class Product implements java.io.Serializable {
  
	private Integer productId;
	private Category category;
	private Shopowner shopowner;
	@NotBlank
	private String productName;
	private String description;
	@NotNull
	@Min(value = 1, message = "Price must be greater than 0")
	private Double price;
	@NotNull
	@Min(value = 1, message = "Stock quantity must be greater than 0")
//	@Digits(integer = 10, fraction = 0, message = "Stock quantity must be an integer") 
	private Integer stockQuantity;
	private String productImage;
	@DateTimeFormat(pattern = "dd/MM/yyyy")
	private Date expiryDate;
	private Boolean status;
	@DateTimeFormat(pattern = "dd/MM/yyyy")
	private Date createdAt;
	@DateTimeFormat(pattern = "dd/MM/yyyy")
	private Date updatedAt;
	private Set<Review> reviews = new HashSet<Review>(0);
	private Set<Productattribute> productattributes = new HashSet<Productattribute>(0);
	private Set<Invoice> invoices = new HashSet<Invoice>(0);
	private Set<Wishlist> wishlists = new HashSet<Wishlist>(0);
	private Set<Promotion> promotions = new HashSet<Promotion>(0);

	public Product() {
	}

	public Product(Category category, Shopowner shopowner,String productName, String description, Double price, Integer stockQuantity,
			String productImage, Date expiryDate, Boolean status, Date createdAt, Date updatedAt,
			Set<Review> reviews, Set<Productattribute> productattributes, Set<Invoice> invoices,
			Set<Wishlist> wishlists, Set<Promotion> promotions) {
		this.category = category;
		this.productName = productName;
		this.description = description;
		this.price = price;
		this.stockQuantity = stockQuantity;
		this.productImage = productImage;
		this.expiryDate = expiryDate;
		this.status = status;
		this.createdAt = createdAt;
		this.updatedAt = updatedAt;
		this.reviews = reviews;
		this.productattributes = productattributes;
		this.invoices = invoices;
		this.wishlists = wishlists;
		this.promotions = promotions;
		this.shopowner = shopowner;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "productid", unique = true, nullable = false)
	public Integer getProductId() {
		return this.productId;
	}

	public void setProductId(Integer productId) {
		this.productId = productId;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "categoryid")
	public Category getCategory() {
		return this.category;
	}

	public void setCategory(Category category) {
		this.category = category;
	}
	
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "shopownerid")
	public Shopowner getShopowner() {
		return this.shopowner;
	}

	public void setShopowner(Shopowner shopowner) {
		this.shopowner = shopowner;
	}

	@Column(name = "productname")
	public String getProductName() {
		return this.productName;
	}

	public void setProductName(String productName) {
		this.productName = productName;
	}

	@Column(name = "description", length = 65535)
	public String getDescription() {
		return this.description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	@Column(name = "price", precision = 10)
	public Double getPrice() {
		return this.price;
	}

	public void setPrice(Double price) {
		this.price = price;
	}

	@Column(name = "stockquantity")
	public Integer getStockQuantity() {
		return this.stockQuantity;
	}

	public void setStockQuantity(Integer stockQuantity) {
		this.stockQuantity = stockQuantity;
	}

	@Column(name = "productimage")
	public String getProductImage() {
		return this.productImage;
	}

	public void setProductImage(String productImage) {
		this.productImage = productImage;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "expirydate", length = 10)
	public Date getExpiryDate() {
		return this.expiryDate;
	}

	public void setExpiryDate(Date expiryDate) {
		this.expiryDate = expiryDate;
	}

	@Column(name = "status")
	public Boolean getStatus() {
		return status;
	}

	public void setStatus(Boolean status) {
		this.status = status;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "createdat", length = 19)
	public Date getCreatedAt() {
		return this.createdAt;
	}

	public void setCreatedAt(Date createdAt) {
		this.createdAt = createdAt;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "updatedat", length = 19)
	public Date getUpdatedAt() {
		return this.updatedAt;
	}

	public void setUpdatedAt(Date updatedAt) {
		this.updatedAt = updatedAt;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "product")
	public Set<Review> getReviews() {
		return this.reviews;
	}

	public void setReviews(Set<Review> reviews) {
		this.reviews = reviews;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "product")
	public Set<Productattribute> getProductattributes() {
		return this.productattributes;
	}

	public void setProductattributes(Set<Productattribute> productattributes) {
		this.productattributes = productattributes;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "product")
	public Set<Invoice> getInvoices() {
		return this.invoices;
	}

	public void setInvoices(Set<Invoice> invoices) {
		this.invoices = invoices;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "product")
	public Set<Wishlist> getWishlists() {
		return this.wishlists;
	}

	public void setWishlists(Set<Wishlist> wishlists) {
		this.wishlists = wishlists;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "product")
	public Set<Promotion> getPromotions() {
		return this.promotions;
	}

	public void setPromotions(Set<Promotion> promotions) {
		this.promotions = promotions;
	}

	@Override
	public String toString() {
		return "Product [productId=" + productId + ", category=" + category.getCategoryId() + ", shopowner=" + shopowner.getOwnerId()
				+ ", productName=" + productName + ", description=" + description + ", price=" + price
				+ ", stockQuantity=" + stockQuantity + ", productImage=" + productImage + ", expiryDate=" + expiryDate
				+ ", status=" + status + ", createdAt=" + createdAt + ", updatedAt=" + updatedAt + "]";
	}

	
	


}
