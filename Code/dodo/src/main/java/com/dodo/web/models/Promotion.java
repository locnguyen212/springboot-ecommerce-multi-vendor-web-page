package com.dodo.web.models;
// Generated Oct 9, 2023, 11:00:28 PM by Hibernate Tools 4.3.6.Final

import static jakarta.persistence.GenerationType.IDENTITY;

import java.util.Date;

import org.springframework.format.annotation.DateTimeFormat;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.Table;
import jakarta.persistence.Temporal;
import jakarta.persistence.TemporalType;
import jakarta.validation.constraints.Max;
import jakarta.validation.constraints.Min;
import jakarta.validation.constraints.NotNull;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * Promotion generated by hbm2java
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name = "promotion")
public class Promotion implements java.io.Serializable {
	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "promotionid", unique = true, nullable = false)
	private Integer promotionId;

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "productid")
	private Product product;
	
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "shopownerid")
	private Shopowner shopowner;

	@Column(name = "discountamount", precision = 10)
	@NotNull
	@Min(value = 1, message = "Discount amount must be greater than 1")
	@Max(value = 100, message = "Discount amount must be lesser than 100")
	private Double discountAmount;

	@Temporal(TemporalType.DATE)
	@Column(name = "startdate", length = 10)
	@DateTimeFormat(pattern = "dd/MM/yyyy")
	@NotNull
	private Date startDate;

	@Temporal(TemporalType.DATE)
	@Column(name = "enddate", length = 10)
	@DateTimeFormat(pattern = "dd/MM/yyyy")
	@NotNull
	private Date endDate;

	@Column(name = "description", length = 65535)
	private String description;

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "createdat", length = 19)
	@DateTimeFormat(pattern = "dd/MM/yyyy")
	private Date createdAt;

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "updatedat", length = 19)
	@DateTimeFormat(pattern = "dd/MM/yyyy")
	private Date updatedAt;

	@Override
	public String toString() {
		return "Promotion [promotionId=" + promotionId + ", product=" + product.getProductId() + ", discountAmount=" + discountAmount
				+ ", startDate=" + startDate + ", endDate=" + endDate + ", description=" + description + ", createdAt="
				+ createdAt + ", updatedAt=" + updatedAt + "]";
	}
	

}
