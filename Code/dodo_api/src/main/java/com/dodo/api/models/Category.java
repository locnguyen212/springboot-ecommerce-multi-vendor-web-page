package com.dodo.api.models;
// Generated Oct 9, 2023, 11:00:28 PM by Hibernate Tools 4.3.6.Final

import static jakarta.persistence.GenerationType.IDENTITY;

import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import org.springframework.format.annotation.DateTimeFormat;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.OneToMany;
import jakarta.persistence.Table;
import jakarta.persistence.Temporal;
import jakarta.persistence.TemporalType;
import jakarta.validation.constraints.NotBlank;

/**
 * Category generated by hbm2java
 */
@Entity
@Table(name = "category")
public class Category implements java.io.Serializable {
 
	private Integer categoryId;
	private Parentcategory parentcategory;
	private User user;
	private String categoryName;	
	private String description;
	private String imagePath;
	private Date createdAt;
	private Date updatedAt;
	private Boolean status;
	private Set<Product> products = new HashSet<Product>(0);

	public Category() {
	}

	public Category(Parentcategory parentcategory, User user, String categoryName, String description, String imagePath,
			Date createdAt, Date updatedAt, Boolean status, Set<Product> products) {
		this.parentcategory = parentcategory;
		this.user = user;
		this.categoryName = categoryName;
		this.description = description;
		this.imagePath = imagePath;
		this.createdAt = createdAt;
		this.updatedAt = updatedAt;
		this.status = status;
		this.products = products;	
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "categoryid", unique = true, nullable = false)
	public Integer getCategoryId() {
		return this.categoryId;
	}

	public void setCategoryId(Integer categoryId) {
		this.categoryId = categoryId;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "parentcategoryid")
	public Parentcategory getParentcategory() {
		return this.parentcategory;
	}

	public void setParentcategory(Parentcategory parentcategory) {
		this.parentcategory = parentcategory;
	}
	
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "userid")
	public User getUser() {
		return user;
	}

	public void setUser(User user) {
		this.user = user;
	}

	@Column(name = "categoryname")
	public String getCategoryName() {
		return this.categoryName;
	}

	public void setCategoryName(String categoryName) {
		this.categoryName = categoryName;
	}

	@Column(name = "description", length = 65535)
	public String getDescription() {
		return this.description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	@Column(name = "imagepath")
	public String getImagePath() {
		return this.imagePath;
	}

	public void setImagePath(String imagePath) {
		this.imagePath = imagePath;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "createdat", length = 19)
	public Date getCreatedAt() {
		return this.createdAt;
	}

	public void setCreatedAt(Date createdAt) {
		this.createdAt = createdAt;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "updatedat", length = 19)
	public Date getUpdatedAt() {
		return this.updatedAt;
	}

	public void setUpdatedAt(Date updatedAt) {
		this.updatedAt = updatedAt;
	}

	@Column(name = "status")
	public Boolean getStatus() {
		return status;
	}

	public void setStatus(Boolean status) {
		this.status = status;
	}
	
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "category")
	public Set<Product> getProducts() {
		return this.products;
	}

	public void setProducts(Set<Product> products) {
		this.products = products;
	}
	
	@Override
	public String toString() {
		return "Category [categoryId=" + categoryId + ", parentcategory=" + parentcategory.getParentCategoryId() + ", user=" + user.getUserId()
				+ ", categoryName=" + categoryName + ", description=" + description + ", imagePath=" + imagePath
				+ ", createdAt=" + createdAt + ", updatedAt=" + updatedAt + ", status=" + status + "]";
	}

}
